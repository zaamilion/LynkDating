version: "3.9"
services:
  # Keycloak Database
  keycloak-postgres:
    image: library/postgres:14
    container_name: keycloak-postgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: keycloak # Dedicated database for Keycloak
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres -d keycloak
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - 5435:5432

  # Keycloak Service
  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    container_name: keycloak
    command:
      - start --auto-build --db=postgres --hostname-strict-https=false --hostname-strict=false --proxy=edge --http-enabled=true
    environment:
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    ports:
      - 8282:8080

  # Application Database (your original app-postgres)
  app-postgres:
    image: library/postgres:14
    container_name: postgres-service
    restart: on-failure
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    volumes:
      - app-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - 5433:5432
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_DATA_DIR: /zookeeper/data
      ZOOKEEPER_LOG_DIR: /zookeeper/log

    volumes:
      - ./zookeeper/data:/zookeeper/data
      - ./zookeeper/log:/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    expose:
      - "9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIR: /kafka/logs
      KAFKA_DELETE_TOPIC_ENABLE: "true" # Разрешаем удаление топиков

    volumes:
      - ./kafka/logs:/kafka/logs

    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 5
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--appendonly yes" ]
volumes:
  keycloak-postgres-data:
  app-postgres-data:
  redis_data:
